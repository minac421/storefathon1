import dbConnect from './dbConnect';

// ุนุฏุฏ ุงููุญุงููุงุช ุงูุฅุฌูุงููุฉ ูุจู ุงูุงุณุชุณูุงู
const MAX_RETRIES = 3;
// ุงููุงุตู ุงูุฒููู ุจูู ุงููุญุงููุงุช (ุจุงููููู ุซุงููุฉ)
const RETRY_DELAY = 1000;

/**
 * ูุธููุฉ ููุบููููุฉ ุชุชุนุงูู ูุน ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุฅุนุงุฏุฉ ุงููุญุงููุงุช
 * 
 * @param fn ุงูุฏุงูุฉ ุงููุฑุงุฏ ุชูููุฐูุง ูุน ุถูุงู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช
 * @param retries ุนุฏุฏ ูุฑุงุช ุฅุนุงุฏุฉ ุงููุญุงููุฉ ูู ุญุงูุฉ ูุดู ุงูุงุชุตุงู (ุงูุชุฑุงุถู 3)
 * @param delay ุงูููุช ุจูู ุงููุญุงููุงุช ุจุงููููู ุซุงููุฉ (ุงูุชุฑุงุถู 1000)
 * @returns ูุชูุฌุฉ ุชูููุฐ ุงูุฏุงูุฉ fn
 */
export async function withDatabase<T>(
  fn: () => Promise<T>,
  retries: number = MAX_RETRIES,
  delay: number = RETRY_DELAY
): Promise<T> {
  let lastError: Error | null = null;
  
  // ุทุจุงุนุฉ ูุนูููุงุช ุฅุนุงุฏุฉ ุงููุญุงููุฉ ููุชุดุฎูุต
  console.log(`๐ ุฏุงูุฉ withDatabase ุชุนูู ูุน ${retries} ูุญุงููุงุช ูุญุฏ ุฃูุตู ูุชุฃุฎูุฑ ${delay}ms`);
  
  // ุชูููุฐ ุนุฏุฉ ูุญุงููุงุช
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`๐ ูุญุงููุฉ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช (${attempt}/${retries})...`);
      
      // ูุญุงููุฉ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
      const connection = await dbConnect();
      
      // ุงูุชุญูู ูู ุตุญุฉ ุงูุงุชุตุงู
      if (!connection || !connection.db) {
        throw new Error('ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช: ุงูุงุชุตุงู ูุงุฑุบ ุฃู ุบูุฑ ููุชูู');
      }
      
      console.log(`โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ ูู ุงููุญุงููุฉ ${attempt}`);
      
      // ุจุนุฏ ูุฌุงุญ ุงูุงุชุตุงูุ ุชูููุฐ ุงูุฏุงูุฉ ุงููุทููุจุฉ
      const result = await fn();
      return result;
    } catch (error) {
      lastError = error as Error;
      
      const errorMessage = error instanceof Error ? error.message : String(error);
      const errorStack = error instanceof Error && error.stack ? error.stack.split('\n').slice(0, 3).join('\n') : '';
      
      console.error(`โ ูุดู ูู ุงููุญุงููุฉ ${attempt}/${retries}:`, errorMessage);
      console.error(`๐ ุฌุฒุก ูู ุณูุงู ุงูุฎุทุฃ:`, errorStack);
      
      // ุชุนููู ููุช ุงูุชุธุงุฑ ุฅุถุงูู ุจูุงุกู ุนูู ุฑูู ุงููุญุงููุฉ - ูู ูุญุงููุฉ ูุงุญูุฉ ุชูุชุธุฑ ุฃุทูู
      const currentDelay = delay * Math.pow(1.5, attempt - 1);
      console.log(`โฑ๏ธ ุงูุชุธุงุฑ ${currentDelay}ms ูุจู ุงููุญุงููุฉ ุงูุชุงููุฉ...`);
      
      // ุฅุฐุง ูู ุชูู ูุฐู ุงููุญุงููุฉ ุงูุฃุฎูุฑุฉุ ุงูุชุธุฑ ูุจู ุงููุญุงููุฉ ุงูุชุงููุฉ
      if (attempt < retries) {
        await new Promise(resolve => setTimeout(resolve, currentDelay));
      }
    }
  }
  
  // ุฅุฐุง ูุตููุง ุฅูู ููุงุ ููุฏ ูุดูุช ุฌููุน ุงููุญุงููุงุช
  const errorMessage = lastError ? lastError.message : 'ูุดูุช ุฌููุน ูุญุงููุงุช ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช';
  console.error(`โ ูุดูุช ุฌููุน ุงููุญุงููุงุช (${retries}). ุขุฎุฑ ุฎุทุฃ:`, errorMessage);
  
  // ุฅุนุงุฏุฉ ุฑูู ุงูุฎุทุฃ ุงูุฃุฎูุฑ
  throw lastError || new Error('ูุดูุช ุฌููุน ูุญุงููุงุช ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ูุณุจุจ ุบูุฑ ูุนุฑูู');
} 