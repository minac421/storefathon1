{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minaa/CascadeProjects/conquerors-website/src/lib/dbConnect.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\n// الرابط الخاص بقاعدة البيانات MongoDB Atlas - استخدم المتغير البيئي أولاً\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://minaadelc4:cHjkStQnKuh91sNt@storefathone.a42qbk5.mongodb.net/storefathon?retryWrites=true&w=majority&appName=storefathone';\n\n/**\n * تعريف حالات الاتصال لقاعدة البيانات\n */\n// يجب استخدام نفس القيم العددية التي يستخدمها Mongoose\nconst MONGOOSE_STATES = {\n  disconnected: 0,\n  connected: 1,\n  connecting: 2,\n  disconnecting: 3,\n} as const;\n\n// ترجمة حالات الاتصال إلى العربية\nconst CONNECTION_STATE_NAMES = [\n  'منفصل',        // 0\n  'متصل',         // 1\n  'جاري الاتصال', // 2\n  'جاري الانفصال' // 3\n];\n\n/**\n * الاتصال العمومي بقاعدة البيانات\n * سيتم استخدامه في جميع أنحاء التطبيق\n * \n * ملاحظة هامة: يجب التأكد من أن الإعدادات الأمنية في MongoDB Atlas تسمح باتصال من IP الخادم\n * تأكد من إضافة IP الخادم في Network Access في MongoDB Atlas\n * وإذا كنت تستخدم Vercel، فتأكد من إضافة 0.0.0.0/0 للسماح بالوصول من جميع عناوين IP\n */\nif (!MONGODB_URI) {\n  throw new Error('يرجى تحديد رابط MONGODB_URI في ملف .env.local');\n}\n\n/**\n * متغير عمومي للحالة في النطاق العمومي\n * لمنع إعادة الاتصال في كل مرة يتم فيها استخدام الدالة\n */\ninterface Cached {\n  conn: mongoose.Connection | null;\n  promise: Promise<mongoose.Connection> | null;\n  errorCount: number;\n  lastErrorTime: number | null;\n}\n\ndeclare global {\n  // eslint-disable-next-line\n  var mongoose: { \n    conn: mongoose.Connection | null; \n    promise: Promise<mongoose.Connection> | null;\n    errorCount: number;\n    lastErrorTime: number | null;\n  };\n}\n\n// تهيئة الكاش العمومي\nlet cached: Cached = global.mongoose as Cached;\n\nif (!cached) {\n  cached = global.mongoose = { \n    conn: null, \n    promise: null, \n    errorCount: 0,\n    lastErrorTime: null \n  };\n}\n\n/**\n * دالة الاتصال بقاعدة البيانات\n * تعيد اتصال قاعدة البيانات أو ترمي خطأ إذا فشل الاتصال بعد عدة محاولات\n */\nasync function dbConnect(): Promise<mongoose.Connection> {\n  // التحقق إذا كان الاتصال موجودًا بالفعل\n  if (cached.conn) {\n    // اختبار الاتصال القائم\n    try {\n      const currentState = cached.conn.readyState;\n      \n      if (currentState === MONGOOSE_STATES.connected) {\n        return cached.conn;\n      } else {\n        console.log(`⚠️ حالة الاتصال بقاعدة البيانات غير صالحة (readyState=${currentState})، إعادة الاتصال...`);\n        cached.conn = null;\n        cached.promise = null;\n      }\n    } catch (connError) {\n      console.error('❌ خطأ عند فحص حالة الاتصال الحالي:', connError);\n      cached.conn = null;\n      cached.promise = null;\n    }\n  }\n\n  // التحقق من وقت حدوث آخر خطأ - إعادة ضبط عداد الأخطاء إذا مر وقت كافٍ\n  if (cached.lastErrorTime && Date.now() - cached.lastErrorTime > 60000) {\n    console.log('🔄 إعادة ضبط عداد الأخطاء بعد مرور دقيقة');\n    cached.errorCount = 0;\n    cached.lastErrorTime = null;\n  }\n\n  // التحقق من عدد المحاولات المتكررة\n  if (cached.errorCount > 5) {\n    const timeSinceLastError = cached.lastErrorTime ? Math.floor((Date.now() - cached.lastErrorTime) / 1000) : 0;\n    console.error(`⛔ تجاوز الحد الأقصى لمحاولات الاتصال (${cached.errorCount}). آخر محاولة منذ ${timeSinceLastError} ثانية.`);\n    \n    // إعادة تعيين العداد بعد 1 دقيقة\n    if (timeSinceLastError > 60) {\n      console.log('🔄 إعادة ضبط عداد محاولات الاتصال بعد فترة انتظار');\n      cached.errorCount = 0;\n    } else {\n      throw new Error(`تجاوز الحد الأقصى لمحاولات الاتصال بقاعدة البيانات. حاول مرة أخرى لاحقًا (${Math.max(0, 60 - timeSinceLastError)} ثانية متبقية)`);\n    }\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: true,\n      serverSelectionTimeoutMS: 20000, // زيادة مهلة اتصال السيرفر إلى 20 ثانية\n      connectTimeoutMS: 20000, // زيادة مهلة الاتصال إلى 20 ثانية\n      socketTimeoutMS: 60000, // زيادة مهلة انتهاء مدة البحث عن السيرفر إلى 60 ثانية\n      family: 4, // استخدام IPv4 بدلاً من IPv6\n      maxPoolSize: 10, // تحديد الحد الأقصى لعدد الاتصالات في المجمع\n      retryWrites: true, // إعادة محاولة الكتابة تلقائيًا\n      retryReads: true, // إعادة محاولة القراءة تلقائيًا\n    };\n\n    // طباعة الرابط للتحقق منه (مع إخفاء كلمة المرور للأمان)\n    const sanitizedUri = MONGODB_URI.replace(/(mongodb\\+srv:\\/\\/[^:]+):[^@]+@/, '$1:****@');\n    console.log('🔍 محاولة الاتصال بـ:', sanitizedUri);\n    \n    // معالجة الاتصال بشكل أفضل\n    cached.promise = mongoose.connect(MONGODB_URI, opts)\n      .then((mongoose) => {\n        const connection = mongoose.connection;\n        console.log(`🌿 تم الاتصال بقاعدة البيانات MongoDB بنجاح! (${connection.name})`);\n        \n        // إضافة مستمع لأحداث الخطأ\n        connection.on('error', (err) => {\n          console.error('❌ خطأ في اتصال قاعدة البيانات خلال التشغيل:', err);\n        });\n        \n        connection.on('disconnected', () => {\n          console.warn('⚠️ انقطع الاتصال بقاعدة البيانات');\n          cached.conn = null;\n        });\n        \n        // إعادة تعيين عداد الأخطاء عند نجاح الاتصال\n        cached.errorCount = 0;\n        cached.lastErrorTime = null;\n        return connection;\n      })\n      .catch((error) => {\n        // زيادة عداد الأخطاء وتسجيل وقت آخر خطأ\n        cached.errorCount++;\n        cached.lastErrorTime = Date.now();\n        \n        console.error('❌ خطأ في الاتصال بقاعدة البيانات MongoDB:', error.message);\n        \n        // تحقق من نوع الخطأ وتقديم رسائل مفيدة\n        if (error.name === 'MongoServerSelectionError') {\n          console.error('⚠️ خطأ اختيار السيرفر: تأكد من أن عنوان IP الخاص بك مسموح به في إعدادات الأمان لـ MongoDB Atlas');\n          console.error('💡 اقتراح: اضبط Network Access في MongoDB Atlas للسماح لـ 0.0.0.0/0 للاختبار');\n        }\n        if (error.message.includes('Authentication failed')) {\n          console.error('🔑 فشل المصادقة: تأكد من صحة اسم المستخدم وكلمة المرور');\n        }\n        if (error.message.includes('getaddrinfo')) {\n          console.error('🌐 خطأ DNS: تأكد من اسم النطاق الصحيح وتوفر اتصال الإنترنت');\n        }\n        \n        // إعادة تعيين الوعد للسماح بالمحاولة التالية\n        cached.promise = null;\n        throw error;\n      });\n  } else {\n    console.log('♻️ استخدام وعد اتصال موجود');\n  }\n\n  try {\n    cached.conn = await cached.promise;\n  } catch (e) {\n    // إعادة ضبط الوعد في حالة حدوث خطأ\n    cached.promise = null;\n    throw e;\n  }\n\n  // التحقق من حالة الاتصال\n  const connectionState = cached.conn.readyState;\n  \n  if (connectionState !== MONGOOSE_STATES.connected) {\n    console.warn(`⚠️ حالة الاتصال غير متوقعة: ${connectionState}`);\n    \n    // عرض اسم حالة الاتصال\n    const stateName = CONNECTION_STATE_NAMES[connectionState] || 'غير معروفة';\n    console.warn(`📊 حالة الاتصال: ${stateName}`);\n    \n    // إذا كانت الحالة \"جاري الاتصال\"، انتظر قليلاً\n    if (connectionState === MONGOOSE_STATES.connecting) {\n      console.log('⏳ جاري الاتصال، الانتظار...');\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // التحقق مرة أخرى بعد الانتظار\n      const newState = cached.conn.readyState;\n      if (newState === MONGOOSE_STATES.connected) {\n        console.log('✅ تم الاتصال بنجاح بعد الانتظار');\n      } else {\n        const newStateName = CONNECTION_STATE_NAMES[newState] || 'غير معروفة';\n        console.warn(`⚠️ لا يزال الاتصال في حالة غير متوقعة: ${newState} (${newStateName})`);\n      }\n    }\n  }\n\n  return cached.conn;\n}\n\nexport default dbConnect;\n"],"names":[],"mappings":";;;AAAA;;AAEA,2EAA2E;AAC3E,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW,IAAI;AAE/C;;CAEC,GACD,uDAAuD;AACvD,MAAM,kBAAkB;IACtB,cAAc;IACd,WAAW;IACX,YAAY;IACZ,eAAe;AACjB;AAEA,kCAAkC;AAClC,MAAM,yBAAyB;IAC7B;IACA;IACA;IACA,gBAAgB,IAAI;CACrB;AAED;;;;;;;CAOC,GACD,uCAAkB;;AAElB;AAuBA,sBAAsB;AACtB,IAAI,SAAiB,OAAO,QAAQ;AAEpC,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QACzB,MAAM;QACN,SAAS;QACT,YAAY;QACZ,eAAe;IACjB;AACF;AAEA;;;CAGC,GACD,eAAe;IACb,wCAAwC;IACxC,IAAI,OAAO,IAAI,EAAE;QACf,wBAAwB;QACxB,IAAI;YACF,MAAM,eAAe,OAAO,IAAI,CAAC,UAAU;YAE3C,IAAI,iBAAiB,gBAAgB,SAAS,EAAE;gBAC9C,OAAO,OAAO,IAAI;YACpB,OAAO;gBACL,QAAQ,GAAG,CAAC,CAAC,sDAAsD,EAAE,aAAa,mBAAmB,CAAC;gBACtG,OAAO,IAAI,GAAG;gBACd,OAAO,OAAO,GAAG;YACnB;QACF,EAAE,OAAO,WAAW;YAClB,QAAQ,KAAK,CAAC,sCAAsC;YACpD,OAAO,IAAI,GAAG;YACd,OAAO,OAAO,GAAG;QACnB;IACF;IAEA,sEAAsE;IACtE,IAAI,OAAO,aAAa,IAAI,KAAK,GAAG,KAAK,OAAO,aAAa,GAAG,OAAO;QACrE,QAAQ,GAAG,CAAC;QACZ,OAAO,UAAU,GAAG;QACpB,OAAO,aAAa,GAAG;IACzB;IAEA,mCAAmC;IACnC,IAAI,OAAO,UAAU,GAAG,GAAG;QACzB,MAAM,qBAAqB,OAAO,aAAa,GAAG,KAAK,KAAK,CAAC,CAAC,KAAK,GAAG,KAAK,OAAO,aAAa,IAAI,QAAQ;QAC3G,QAAQ,KAAK,CAAC,CAAC,sCAAsC,EAAE,OAAO,UAAU,CAAC,kBAAkB,EAAE,mBAAmB,OAAO,CAAC;QAExH,iCAAiC;QACjC,IAAI,qBAAqB,IAAI;YAC3B,QAAQ,GAAG,CAAC;YACZ,OAAO,UAAU,GAAG;QACtB,OAAO;YACL,MAAM,IAAI,MAAM,CAAC,0EAA0E,EAAE,KAAK,GAAG,CAAC,GAAG,KAAK,oBAAoB,cAAc,CAAC;QACnJ;IACF;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;YAChB,0BAA0B;YAC1B,kBAAkB;YAClB,iBAAiB;YACjB,QAAQ;YACR,aAAa;YACb,aAAa;YACb,YAAY;QACd;QAEA,wDAAwD;QACxD,MAAM,eAAe,YAAY,OAAO,CAAC,mCAAmC;QAC5E,QAAQ,GAAG,CAAC,yBAAyB;QAErC,2BAA2B;QAC3B,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAC5C,IAAI,CAAC,CAAC;YACL,MAAM,aAAa,SAAS,UAAU;YACtC,QAAQ,GAAG,CAAC,CAAC,8CAA8C,EAAE,WAAW,IAAI,CAAC,CAAC,CAAC;YAE/E,2BAA2B;YAC3B,WAAW,EAAE,CAAC,SAAS,CAAC;gBACtB,QAAQ,KAAK,CAAC,+CAA+C;YAC/D;YAEA,WAAW,EAAE,CAAC,gBAAgB;gBAC5B,QAAQ,IAAI,CAAC;gBACb,OAAO,IAAI,GAAG;YAChB;YAEA,4CAA4C;YAC5C,OAAO,UAAU,GAAG;YACpB,OAAO,aAAa,GAAG;YACvB,OAAO;QACT,GACC,KAAK,CAAC,CAAC;YACN,wCAAwC;YACxC,OAAO,UAAU;YACjB,OAAO,aAAa,GAAG,KAAK,GAAG;YAE/B,QAAQ,KAAK,CAAC,6CAA6C,MAAM,OAAO;YAExE,uCAAuC;YACvC,IAAI,MAAM,IAAI,KAAK,6BAA6B;gBAC9C,QAAQ,KAAK,CAAC;gBACd,QAAQ,KAAK,CAAC;YAChB;YACA,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,0BAA0B;gBACnD,QAAQ,KAAK,CAAC;YAChB;YACA,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,gBAAgB;gBACzC,QAAQ,KAAK,CAAC;YAChB;YAEA,6CAA6C;YAC7C,OAAO,OAAO,GAAG;YACjB,MAAM;QACR;IACJ,OAAO;QACL,QAAQ,GAAG,CAAC;IACd;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,mCAAmC;QACnC,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,yBAAyB;IACzB,MAAM,kBAAkB,OAAO,IAAI,CAAC,UAAU;IAE9C,IAAI,oBAAoB,gBAAgB,SAAS,EAAE;QACjD,QAAQ,IAAI,CAAC,CAAC,4BAA4B,EAAE,iBAAiB;QAE7D,uBAAuB;QACvB,MAAM,YAAY,sBAAsB,CAAC,gBAAgB,IAAI;QAC7D,QAAQ,IAAI,CAAC,CAAC,iBAAiB,EAAE,WAAW;QAE5C,+CAA+C;QAC/C,IAAI,oBAAoB,gBAAgB,UAAU,EAAE;YAClD,QAAQ,GAAG,CAAC;YACZ,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;YAEjD,+BAA+B;YAC/B,MAAM,WAAW,OAAO,IAAI,CAAC,UAAU;YACvC,IAAI,aAAa,gBAAgB,SAAS,EAAE;gBAC1C,QAAQ,GAAG,CAAC;YACd,OAAO;gBACL,MAAM,eAAe,sBAAsB,CAAC,SAAS,IAAI;gBACzD,QAAQ,IAAI,CAAC,CAAC,uCAAuC,EAAE,SAAS,EAAE,EAAE,aAAa,CAAC,CAAC;YACrF;QACF;IACF;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minaa/CascadeProjects/conquerors-website/src/models/Service.ts"],"sourcesContent":["import mongoose, { Schema, Document } from 'mongoose';\n\n// واجهة للترجمات\ninterface Translation {\n  ar: string;\n  en: string;\n  tr: string;\n}\n\n// واجهة للخدمة\nexport interface IService extends Document {\n  id: string;\n  category: 'resources' | 'bots' | 'castle' | 'events';\n  name: Translation;\n  description?: Translation;\n  price: number;\n  icon: string;\n  iconAlt?: string;\n  popular?: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// مخطط الخدمة\nconst ServiceSchema: Schema = new Schema(\n  {\n    id: {\n      type: String,\n      required: [true, 'يجب تحديد معرف الخدمة'],\n      unique: true,\n      trim: true\n    },\n    category: {\n      type: String,\n      required: [true, 'يجب تحديد فئة الخدمة'],\n      enum: ['resources', 'bots', 'castle', 'events']\n    },\n    name: {\n      ar: { type: String, required: [true, 'يجب تحديد الاسم بالعربية'] },\n      en: { type: String, required: [true, 'يجب تحديد الاسم بالإنجليزية'] },\n      tr: { type: String, required: [true, 'يجب تحديد الاسم بالتركية'] }\n    },\n    description: {\n      ar: { type: String },\n      en: { type: String },\n      tr: { type: String }\n    },\n    price: {\n      type: Number,\n      required: [true, 'يجب تحديد سعر الخدمة'],\n      min: [0, 'يجب أن يكون السعر موجبًا']\n    },\n    icon: {\n      type: String,\n      required: [true, 'يجب تحديد رمز الخدمة']\n    },\n    iconAlt: {\n      type: String\n    },\n    popular: {\n      type: Boolean,\n      default: false\n    }\n  },\n  {\n    timestamps: true\n  }\n);\n\n// إنشاء وتصدير النموذج\nexport default mongoose.models.Service || mongoose.model<IService>('Service', ServiceSchema);\n"],"names":[],"mappings":";;;AAAA;;AAuBA,cAAc;AACd,MAAM,gBAAwB,IAAI,yGAAA,CAAA,SAAM,CACtC;IACE,IAAI;QACF,MAAM;QACN,UAAU;YAAC;YAAM;SAAwB;QACzC,QAAQ;QACR,MAAM;IACR;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,MAAM;YAAC;YAAa;YAAQ;YAAU;SAAS;IACjD;IACA,MAAM;QACJ,IAAI;YAAE,MAAM;YAAQ,UAAU;gBAAC;gBAAM;aAA2B;QAAC;QACjE,IAAI;YAAE,MAAM;YAAQ,UAAU;gBAAC;gBAAM;aAA8B;QAAC;QACpE,IAAI;YAAE,MAAM;YAAQ,UAAU;gBAAC;gBAAM;aAA2B;QAAC;IACnE;IACA,aAAa;QACX,IAAI;YAAE,MAAM;QAAO;QACnB,IAAI;YAAE,MAAM;QAAO;QACnB,IAAI;YAAE,MAAM;QAAO;IACrB;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,KAAK;YAAC;YAAG;SAA2B;IACtC;IACA,MAAM;QACJ,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;IAC1C;IACA,SAAS;QACP,MAAM;IACR;IACA,SAAS;QACP,MAAM;QACN,SAAS;IACX;AACF,GACA;IACE,YAAY;AACd;uCAIa,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAW,WAAW","debugId":null}},
    {"offset": {"line": 339, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minaa/CascadeProjects/conquerors-website/src/app/api/services/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport dbConnect from '@/lib/dbConnect';\nimport ServiceModel from '@/models/Service';\nimport { Document, Model } from 'mongoose';\n\n// الحصول على جميع الخدمات بدون نظام صفحات\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('🔍 جاري محاولة الاتصال بقاعدة البيانات للخدمات...');\n    await dbConnect();\n    \n    const url = new URL(request.url);\n    \n    // استخراج معلمات التصفية والترتيب\n    const category = url.searchParams.get('category');\n    const sortBy = url.searchParams.get('sortBy') || 'createdAt';\n    const sortOrder = url.searchParams.get('sortOrder') || 'desc';\n    \n    // بناء استعلام البحث\n    const query: any = {};\n    if (category) {\n      query.category = category;\n    }\n    \n    // بناء خيارات الترتيب\n    const sort: any = {};\n    sort[sortBy] = sortOrder === 'asc' ? 1 : -1;\n    \n    // الحصول على إجمالي العدد للإحصائيات\n    const totalServices = await (ServiceModel as Model<any>).countDocuments(query);\n    const distinctCategories = await (ServiceModel as Model<any>).distinct('category');\n    \n    // استرداد جميع الخدمات \n    const services = await (ServiceModel as Model<any>).find(query)\n      .sort(sort)\n      .limit(500); // حد أقصى للحماية من التحميل الزائد\n    \n    // تحويل النتائج\n    const results = services.map((doc: Document) => {\n      const service = doc.toObject();\n      return {\n        id: service.id,\n        category: service.category,\n        name: service.name,\n        description: service.description,\n        price: service.price,\n        icon: service.icon,\n        iconAlt: service.iconAlt,\n        popular: service.popular || false,\n        createdAt: service.createdAt,\n        updatedAt: service.updatedAt\n      };\n    });\n    \n    // تنظيم النتائج حسب الفئة\n    const categorizedResults = {\n      resources: results.filter(service => service.category === 'resources'),\n      castle: results.filter(service => service.category === 'castle'),\n      bots: results.filter(service => service.category === 'bots'),\n      events: results.filter(service => service.category === 'events')\n    };\n    \n    // إرجاع جميع الخدمات في مصفوفة واحدة مع تحديد ترميز UTF-8\n    return new NextResponse(JSON.stringify({\n      services: categorizedResults,\n      stats: {\n        totalServices,\n        distinctCategories\n      }\n    }), {\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    });\n  } catch (error) {\n    console.error('خطأ في جلب الخدمات:', error);\n    \n    // في حالة الفشل، إرجاع البيانات الوهمية المعرفة سابقًا\n    // حتى لا تنعطل واجهة المستخدم\n    const mockServices = {\n      resources: [\n        { id: 'wood', name: { ar: 'الخشب', en: 'Wood', tr: 'Ahşap' }, price: 150, icon: '/images/resources/wood.svg', iconAlt: '🌲' },\n        { id: 'iron', name: { ar: 'الحديد', en: 'Iron', tr: 'Demir' }, price: 200, icon: '/images/resources/iron.svg', iconAlt: '⛏️' },\n        { id: 'wheat', name: { ar: 'القمح', en: 'Wheat', tr: 'Buğday' }, price: 100, icon: '/images/resources/wheat.svg', iconAlt: '🌾' },\n        { id: 'silver', name: { ar: 'الفضة', en: 'Silver', tr: 'Gümüş' }, price: 250, icon: '/images/resources/silver.svg', iconAlt: '🔷' },\n      ],\n      castle: [\n        { id: 'castle1', name: { ar: 'قلعة صغيرة', en: 'Small Castle', tr: 'Küçük Kale' }, price: 500, icon: '/images/castles/small_castle.svg', iconAlt: '🏰' },\n        { id: 'castle2', name: { ar: 'قلعة متوسطة', en: 'Medium Castle', tr: 'Orta Kale' }, price: 1000, icon: '/images/castles/medium_castle.svg', iconAlt: '🏯' },\n        { id: 'castle3', name: { ar: 'قلعة كبيرة', en: 'Large Castle', tr: 'Büyük Kale' }, price: 1500, icon: '/images/castles/large_castle.svg', iconAlt: '🏡️' },\n      ],\n      bots: [\n        { id: 'bot1', name: { ar: 'بوت المزارع', en: 'Farmer Bot', tr: 'Çiftçi Bot' }, price: 300, icon: '/images/bots/farmer_bot.svg', iconAlt: '🤖' },\n        { id: 'bot2', name: { ar: 'بوت المحارب', en: 'Warrior Bot', tr: 'Savaşçı Bot' }, price: 450, icon: '/images/bots/warrior_bot.svg', iconAlt: '👾' },\n        { id: 'bot3', name: { ar: 'بوت التاجر', en: 'Trader Bot', tr: 'Tüccar Bot' }, price: 400, icon: '/images/bots/trader_bot.svg', iconAlt: '🎮' },\n      ],\n      events: [\n        {\n          id: 'starter',\n          name: { ar: 'حزمة المبتدئ', en: 'Starter Package', tr: 'Başlangıç Paketi' },\n          description: {\n            ar: 'مثالية للاعبين الجدد، تتضمن موارد أساسية للبدء',\n            en: 'Perfect for new players, includes basic resources to get started',\n            tr: 'Yeni oyuncular için mükemmel, başlamak için temel kaynaklar içerir'\n          },\n          price: 499,\n          icon: '🎁',\n          popular: false\n        },\n        {\n          id: 'premium',\n          name: { ar: 'حزمة بريميوم', en: 'Premium Package', tr: 'Premium Paket' },\n          description: {\n            ar: 'تضم مجموعة متنوعة من الموارد والمزايا للاعبين المتقدمين',\n            en: 'Includes a diverse set of resources and perks for advanced players',\n            tr: 'Gelişmiş oyuncular için çeşitli kaynaklar ve avantajlar içerir'\n          },\n          price: 999,\n          icon: '💎',\n          popular: true\n        },\n        {\n          id: 'ultimate',\n          name: { ar: 'الحزمة النهائية', en: 'Ultimate Package', tr: 'Ultimate Paket' },\n          description: {\n            ar: 'كل ما تحتاجه لتصبح قوة لا يستهان بها في اللعبة',\n            en: 'Everything you need to become a formidable power in the game',\n            tr: 'Oyunda korkunç bir güç olmak için ihtiyacınız olan her şey'\n          },\n          price: 1499,\n          icon: '👑',\n          popular: false\n        }\n      ]\n    };\n    \n    return new NextResponse(JSON.stringify({\n      services: mockServices,\n      stats: {\n        totalServices: Object.values(mockServices).flat().length,\n        distinctCategories: Object.keys(mockServices)\n      }\n    }), {\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    });\n  }\n}\n\n// إضافة خدمة جديدة\nexport async function POST(request: NextRequest) {\n  try {\n    await dbConnect();\n    const serviceData = await request.json();\n    \n    // التحقق من وجود معرف الخدمة\n    const existingService = await (ServiceModel as Model<any>).findOne({ id: serviceData.id });\n    if (existingService) {\n      return new NextResponse(JSON.stringify({\n        error: 'معرف الخدمة مستخدم بالفعل، الرجاء استخدام معرف آخر'\n      }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8'\n        }\n      });\n    }\n    \n    // إنشاء خدمة جديدة\n    const newService = await (ServiceModel as Model<any>).create(serviceData);\n    \n    return new NextResponse(JSON.stringify({ \n      id: newService.id,\n      success: true \n    }), {\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    });\n  } catch (error) {\n    console.error('خطأ في إضافة خدمة جديدة:', error);\n    return new NextResponse(JSON.stringify(\n      { error: 'حدث خطأ أثناء إضافة الخدمة الجديدة' }\n    ), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    });\n  }\n}\n\n// تحديث خدمة موجودة\nexport async function PUT(request: NextRequest) {\n  try {\n    await dbConnect();\n    const serviceData = await request.json();\n    const { id, ...updateData } = serviceData;\n    \n    await (ServiceModel as Model<any>).findOneAndUpdate(\n      { id: id }, \n      {\n        ...updateData,\n        updatedAt: new Date()\n      }\n    );\n    \n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('خطأ في تحديث الخدمة:', error);\n    return new NextResponse(JSON.stringify(\n      { error: 'حدث خطأ أثناء تحديث الخدمة' }\n    ), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    });\n  }\n}\n\n// حذف خدمة\nexport async function DELETE(request: NextRequest) {\n  try {\n    await dbConnect();\n    const url = new URL(request.url);\n    const id = url.searchParams.get('id');\n    \n    if (!id) {\n      return new NextResponse(JSON.stringify(\n        { error: 'معرف الخدمة مطلوب' }\n      ), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8'\n        }\n      });\n    }\n    \n    await (ServiceModel as Model<any>).findOneAndDelete({ id: id });\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('خطأ في حذف الخدمة:', error);\n    return new NextResponse(JSON.stringify(\n      { error: 'حدث خطأ أثناء حذف الخدمة' }\n    ), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}