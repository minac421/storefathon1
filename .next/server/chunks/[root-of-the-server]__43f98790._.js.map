{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minaa/CascadeProjects/conquerors-website/src/lib/dbConnect.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\n// الرابط الخاص بقاعدة البيانات MongoDB Atlas - استخدم المتغير البيئي أولاً\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://minaadelc4:cHjkStQnKuh91sNt@storefathone.a42qbk5.mongodb.net/storefathon?retryWrites=true&w=majority&appName=storefathone';\n\n/**\n * تعريف حالات الاتصال لقاعدة البيانات\n */\n// يجب استخدام نفس القيم العددية التي يستخدمها Mongoose\nconst MONGOOSE_STATES = {\n  disconnected: 0,\n  connected: 1,\n  connecting: 2,\n  disconnecting: 3,\n} as const;\n\n// ترجمة حالات الاتصال إلى العربية\nconst CONNECTION_STATE_NAMES = [\n  'منفصل',        // 0\n  'متصل',         // 1\n  'جاري الاتصال', // 2\n  'جاري الانفصال' // 3\n];\n\n/**\n * الاتصال العمومي بقاعدة البيانات\n * سيتم استخدامه في جميع أنحاء التطبيق\n * \n * ملاحظة هامة: يجب التأكد من أن الإعدادات الأمنية في MongoDB Atlas تسمح باتصال من IP الخادم\n * تأكد من إضافة IP الخادم في Network Access في MongoDB Atlas\n * وإذا كنت تستخدم Vercel، فتأكد من إضافة 0.0.0.0/0 للسماح بالوصول من جميع عناوين IP\n */\nif (!MONGODB_URI) {\n  throw new Error('يرجى تحديد رابط MONGODB_URI في ملف .env.local');\n}\n\n/**\n * متغير عمومي للحالة في النطاق العمومي\n * لمنع إعادة الاتصال في كل مرة يتم فيها استخدام الدالة\n */\ninterface Cached {\n  conn: mongoose.Connection | null;\n  promise: Promise<mongoose.Connection> | null;\n  errorCount: number;\n  lastErrorTime: number | null;\n}\n\ndeclare global {\n  // eslint-disable-next-line\n  var mongoose: { \n    conn: mongoose.Connection | null; \n    promise: Promise<mongoose.Connection> | null;\n    errorCount: number;\n    lastErrorTime: number | null;\n  };\n}\n\n// تهيئة الكاش العمومي\nlet cached: Cached = global.mongoose as Cached;\n\nif (!cached) {\n  cached = global.mongoose = { \n    conn: null, \n    promise: null, \n    errorCount: 0,\n    lastErrorTime: null \n  };\n}\n\n/**\n * دالة الاتصال بقاعدة البيانات\n * تعيد اتصال قاعدة البيانات أو ترمي خطأ إذا فشل الاتصال بعد عدة محاولات\n */\nasync function dbConnect(): Promise<mongoose.Connection> {\n  // التحقق إذا كان الاتصال موجودًا بالفعل\n  if (cached.conn) {\n    // اختبار الاتصال القائم\n    try {\n      const currentState = cached.conn.readyState;\n      \n      if (currentState === MONGOOSE_STATES.connected) {\n        return cached.conn;\n      } else {\n        console.log(`⚠️ حالة الاتصال بقاعدة البيانات غير صالحة (readyState=${currentState})، إعادة الاتصال...`);\n        cached.conn = null;\n        cached.promise = null;\n      }\n    } catch (connError) {\n      console.error('❌ خطأ عند فحص حالة الاتصال الحالي:', connError);\n      cached.conn = null;\n      cached.promise = null;\n    }\n  }\n\n  // التحقق من وقت حدوث آخر خطأ - إعادة ضبط عداد الأخطاء إذا مر وقت كافٍ\n  if (cached.lastErrorTime && Date.now() - cached.lastErrorTime > 60000) {\n    console.log('🔄 إعادة ضبط عداد الأخطاء بعد مرور دقيقة');\n    cached.errorCount = 0;\n    cached.lastErrorTime = null;\n  }\n\n  // التحقق من عدد المحاولات المتكررة\n  if (cached.errorCount > 5) {\n    const timeSinceLastError = cached.lastErrorTime ? Math.floor((Date.now() - cached.lastErrorTime) / 1000) : 0;\n    console.error(`⛔ تجاوز الحد الأقصى لمحاولات الاتصال (${cached.errorCount}). آخر محاولة منذ ${timeSinceLastError} ثانية.`);\n    \n    // إعادة تعيين العداد بعد 1 دقيقة\n    if (timeSinceLastError > 60) {\n      console.log('🔄 إعادة ضبط عداد محاولات الاتصال بعد فترة انتظار');\n      cached.errorCount = 0;\n    } else {\n      throw new Error(`تجاوز الحد الأقصى لمحاولات الاتصال بقاعدة البيانات. حاول مرة أخرى لاحقًا (${Math.max(0, 60 - timeSinceLastError)} ثانية متبقية)`);\n    }\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: true,\n      serverSelectionTimeoutMS: 20000, // زيادة مهلة اتصال السيرفر إلى 20 ثانية\n      connectTimeoutMS: 20000, // زيادة مهلة الاتصال إلى 20 ثانية\n      socketTimeoutMS: 60000, // زيادة مهلة انتهاء مدة البحث عن السيرفر إلى 60 ثانية\n      family: 4, // استخدام IPv4 بدلاً من IPv6\n      maxPoolSize: 10, // تحديد الحد الأقصى لعدد الاتصالات في المجمع\n      retryWrites: true, // إعادة محاولة الكتابة تلقائيًا\n      retryReads: true, // إعادة محاولة القراءة تلقائيًا\n    };\n\n    // طباعة الرابط للتحقق منه (مع إخفاء كلمة المرور للأمان)\n    const sanitizedUri = MONGODB_URI.replace(/(mongodb\\+srv:\\/\\/[^:]+):[^@]+@/, '$1:****@');\n    console.log('🔍 محاولة الاتصال بـ:', sanitizedUri);\n    \n    // معالجة الاتصال بشكل أفضل\n    cached.promise = mongoose.connect(MONGODB_URI, opts)\n      .then((mongoose) => {\n        const connection = mongoose.connection;\n        console.log(`🌿 تم الاتصال بقاعدة البيانات MongoDB بنجاح! (${connection.name})`);\n        \n        // إضافة مستمع لأحداث الخطأ\n        connection.on('error', (err) => {\n          console.error('❌ خطأ في اتصال قاعدة البيانات خلال التشغيل:', err);\n        });\n        \n        connection.on('disconnected', () => {\n          console.warn('⚠️ انقطع الاتصال بقاعدة البيانات');\n          cached.conn = null;\n        });\n        \n        // إعادة تعيين عداد الأخطاء عند نجاح الاتصال\n        cached.errorCount = 0;\n        cached.lastErrorTime = null;\n        return connection;\n      })\n      .catch((error) => {\n        // زيادة عداد الأخطاء وتسجيل وقت آخر خطأ\n        cached.errorCount++;\n        cached.lastErrorTime = Date.now();\n        \n        console.error('❌ خطأ في الاتصال بقاعدة البيانات MongoDB:', error.message);\n        \n        // تحقق من نوع الخطأ وتقديم رسائل مفيدة\n        if (error.name === 'MongoServerSelectionError') {\n          console.error('⚠️ خطأ اختيار السيرفر: تأكد من أن عنوان IP الخاص بك مسموح به في إعدادات الأمان لـ MongoDB Atlas');\n          console.error('💡 اقتراح: اضبط Network Access في MongoDB Atlas للسماح لـ 0.0.0.0/0 للاختبار');\n        }\n        if (error.message.includes('Authentication failed')) {\n          console.error('🔑 فشل المصادقة: تأكد من صحة اسم المستخدم وكلمة المرور');\n        }\n        if (error.message.includes('getaddrinfo')) {\n          console.error('🌐 خطأ DNS: تأكد من اسم النطاق الصحيح وتوفر اتصال الإنترنت');\n        }\n        \n        // إعادة تعيين الوعد للسماح بالمحاولة التالية\n        cached.promise = null;\n        throw error;\n      });\n  } else {\n    console.log('♻️ استخدام وعد اتصال موجود');\n  }\n\n  try {\n    cached.conn = await cached.promise;\n  } catch (e) {\n    // إعادة ضبط الوعد في حالة حدوث خطأ\n    cached.promise = null;\n    throw e;\n  }\n\n  // التحقق من حالة الاتصال\n  const connectionState = cached.conn.readyState;\n  \n  if (connectionState !== MONGOOSE_STATES.connected) {\n    console.warn(`⚠️ حالة الاتصال غير متوقعة: ${connectionState}`);\n    \n    // عرض اسم حالة الاتصال\n    const stateName = CONNECTION_STATE_NAMES[connectionState] || 'غير معروفة';\n    console.warn(`📊 حالة الاتصال: ${stateName}`);\n    \n    // إذا كانت الحالة \"جاري الاتصال\"، انتظر قليلاً\n    if (connectionState === MONGOOSE_STATES.connecting) {\n      console.log('⏳ جاري الاتصال، الانتظار...');\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // التحقق مرة أخرى بعد الانتظار\n      const newState = cached.conn.readyState;\n      if (newState === MONGOOSE_STATES.connected) {\n        console.log('✅ تم الاتصال بنجاح بعد الانتظار');\n      } else {\n        const newStateName = CONNECTION_STATE_NAMES[newState] || 'غير معروفة';\n        console.warn(`⚠️ لا يزال الاتصال في حالة غير متوقعة: ${newState} (${newStateName})`);\n      }\n    }\n  }\n\n  return cached.conn;\n}\n\nexport default dbConnect;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minaa/CascadeProjects/conquerors-website/src/types/blog.ts"],"sourcesContent":["// تعريف فئات المقال المتاحة\nexport enum BlogCategory {\n  GUIDE = 'guide', // أدلة اللاعبين\n  NEWS = 'news', // أخبار اللعبة\n  TIPS = 'tips', // نصائح وحيل\n  ANALYSIS = 'analysis', // تحليلات وتقييمات\n  MARKET = 'market', // أخبار السوق\n  MEMES = 'memes', // ميمز وطرائف\n  EXPERIENCE = 'experience', // تجارب اللاعبين\n}\n\n// أنواع التفاعلات المختلفة للمقالات\nexport enum ReactionType {\n  SWORD = 'sword', // سيف للموافقة القوية أو المحتوى الاستراتيجي\n  FIRE = 'fire',   // نار للمحتوى الحماسي والمثير\n  SHIELD = 'shield', // درع للمحتوى المفيد أو النصائح الدفاعية\n  CROWN = 'crown',  // تاج للمحتوى الاستثنائي\n  CASTLE = 'castle', // قلعة للأفكار الإبداعية أو المبتكرة\n  LAUGH = 'laugh'  // ضحك للمحتوى المسلي أو الطريف\n}\n\n// واجهة بيانات التفاعل\nexport interface Reaction {\n  type: ReactionType;\n  sessionId: string; // معرف الجلسة لمنع التكرار\n  nickname?: string; // اسم مستعار اختياري للمستخدم\n  timestamp: string; // توقيت التفاعل\n}\n\n// واجهة معلومات المؤلف\nexport interface Author {\n  nickname: string;  // الاسم المستعار\n  avatar?: string;   // رابط الصورة الرمزية\n  sessionId: string; // معرّف جلسة مشفر (للداخل فقط)\n  email?: string;    // اختياري، للإشعارات\n  badge?: string;    // شارة خاصة (مطور، مشرف، لاعب مميز)\n}\n\n// واجهة التعليق\nexport interface Comment {\n  id: string;\n  postId: string;\n  content: string;\n  author: Author;\n  createdAt: string;\n  reactions: Reaction[];\n  replies?: Comment[];\n}\n\n// واجهة تفاعلات المقال\nexport interface PostInteraction {\n  reactions: Reaction[];\n  views: number;\n  shares: number;\n  comments: Comment[];\n}\n\n// نموذج بيانات المقال للواجهة الأمامية\nexport interface BlogPostProps {\n  id: string;\n  title: string;\n  slug: string;\n  content: string;\n  summary: string;\n  category: string;\n  featuredImage: string;\n  author: Author;\n  tags: string[];\n  interaction: PostInteraction;\n  isPublished: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n"],"names":[],"mappings":"AAAA,4BAA4B;;;;;AACrB,IAAA,AAAK,sCAAA;;;;;;;;WAAA;;AAWL,IAAA,AAAK,sCAAA;;;;;;qCAMO,+BAA+B;WANtC","debugId":null}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minaa/CascadeProjects/conquerors-website/src/models/BlogPost.ts"],"sourcesContent":["import mongoose from 'mongoose';\nimport { BlogCategory } from '@/types/blog';\n\n// استيراد تعريف فئات المقال من ملف الأنواع\n\n// نموذج بيانات التعليق\nconst CommentSchema = new mongoose.Schema({\n  author: {\n    userId: { type: String, default: null }, // معرف المستخدم إذا كان مسجلاً\n    name: { type: String, required: [true, 'الرجاء إدخال اسم المعلق'] }, // اسم المعلق\n    avatar: { type: String, default: null } // الصورة الرمزية للمعلق\n  },\n  content: {\n    type: String,\n    required: [true, 'الرجاء إدخال نص التعليق'],\n    trim: true,\n    maxlength: [500, 'يجب ألا يزيد التعليق عن 500 حرف']\n  },\n  likes: [\n    { type: String } // قائمة معرفات المستخدمين الذين أعجبوا بالتعليق\n  ],\n  replies: [{\n    author: {\n      userId: { type: String, default: null },\n      name: { type: String, required: true },\n      avatar: { type: String, default: null }\n    },\n    content: {\n      type: String,\n      required: true,\n      trim: true,\n      maxlength: [300, 'يجب ألا يزيد الرد عن 300 حرف']\n    },\n    likes: [{ type: String }],\n    createdAt: { type: Date, default: Date.now }\n  }],\n  isApproved: { type: Boolean, default: true }, // هل التعليق معتمد للعرض\n  createdAt: { type: Date, default: Date.now }\n}, {\n  timestamps: true\n});\n\n// تعريف نموذج معلومات الكاتب\nconst AuthorInfoSchema = new mongoose.Schema({\n  userId: { type: String, default: null }, // معرف المستخدم إذا كان مسجلاً\n  name: { type: String, required: true }, // اسم الكاتب\n  avatar: { type: String, default: null }, // الصورة الرمزية للكاتب\n  bio: { type: String, default: '' }, // نبذة عن الكاتب\n  contactInfo: { type: String, default: null }, // معلومات التواصل (اختيارية)\n  isFeatured: { type: Boolean, default: false }, // هل الكاتب مميز؟\n  isVerified: { type: Boolean, default: false } // هل الكاتب موثق؟\n});\n\n// تعريف مخطط بيانات المقال\nconst BlogPostSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: [true, 'الرجاء إدخال عنوان المقال'],\n    trim: true,\n    maxlength: [100, 'يجب ألا يزيد العنوان عن 100 حرف']\n  },\n  slug: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true\n  },\n  content: {\n    type: String,\n    required: [true, 'الرجاء إدخال محتوى المقال'],\n  },\n  summary: {\n    type: String,\n    required: [true, 'الرجاء إدخال ملخص المقال'],\n    maxlength: [300, 'يجب ألا يزيد الملخص عن 300 حرف']\n  },\n  category: {\n    type: String,\n    required: [true, 'الرجاء اختيار فئة المقال'],\n    enum: Object.values(BlogCategory),\n    default: BlogCategory.NEWS\n  },\n  // معلومات الكاتب المفصلة\n  author: AuthorInfoSchema,\n  \n  // صور ووسائط المقال\n  featuredImage: {\n    type: String,\n    default: null, // يمكن أن يكون المقال بدون صورة مميزة\n  },\n  media: {\n    images: [{ type: String }], // مسارات الصور الإضافية\n    videos: [{\n      url: { type: String }, // مسار الفيديو\n      thumbnail: { type: String, default: null }, // صورة مصغرة للفيديو\n      title: { type: String, default: '' }, // عنوان الفيديو\n      duration: { type: Number, default: 0 } // مدة الفيديو بالثواني\n    }]\n  },\n  \n  // التفاعل مع المقال\n  interaction: {\n    likes: [{ type: String }], // قائمة معرفات المستخدمين الذين أعجبوا بالمقال\n    shares: { type: Number, default: 0 }, // عدد مرات مشاركة المقال\n    bookmarks: [{ type: String }], // قائمة معرفات المستخدمين الذين حفظوا المقال\n    views: { type: Number, default: 0 }, // عدد المشاهدات\n    // إضافة قسم التفاعلات المتعددة\n    reactions: {\n      fire: [{ type: String }],    // تفاعل نار - معرفات المستخدمين\n      shield: [{ type: String }],  // تفاعل درع - معرفات المستخدمين\n      crown: [{ type: String }],   // تفاعل تاج - معرفات المستخدمين\n      castle: [{ type: String }],  // تفاعل قلعة - معرفات المستخدمين \n      laugh: [{ type: String }]    // تفاعل ضحك - معرفات المستخدمين\n    }\n  },\n  \n  // التعليقات على المقال\n  comments: [CommentSchema],\n  \n  // كلمات مفتاحية ووسوم\n  tags: [{\n    type: String,\n    trim: true\n  }],\n  \n  // تمييز المقال\n  isFeatured: { type: Boolean, default: false }, // هل المقال مميز؟\n  isPinned: { type: Boolean, default: false }, // هل المقال مثبت في الأعلى؟\n  isPublished: { type: Boolean, default: true }, // هل المقال منشور؟\n  needsReview: { type: Boolean, default: true }, // هل يحتاج المقال لمراجعة؟ (للمشاركات الجديدة)\n  \n  // تواريخ\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n  publishedAt: { type: Date, default: null } // تاريخ النشر الفعلي\n}, {\n  timestamps: true\n});\n\n// إنشاء فهرس للبحث النصي\nBlogPostSchema.index({ title: 'text', content: 'text', tags: 'text' });\n\n// إنشاء النموذج (إذا لم يكن موجود بالفعل)\nexport default mongoose.models.BlogPost || mongoose.model('BlogPost', BlogPostSchema);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 579, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minaa/CascadeProjects/conquerors-website/src/lib/mongoHelpers.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\n/**\n * وظائف مساعدة لتجاوز مشاكل TypeScript مع Mongoose\n */\n\nexport async function findDocById(model: any, id: string) {\n  // استخدام mongoose.model لتجنب أخطاء TypeScript مع findById\n  return await model.findById(id).lean().exec();\n}\n\nexport async function findOnDoc(model: any, query: any) {\n  // استخدام lean() وexec() لتجنب أخطاء TypeScript\n  return await model.findOne(query).lean().exec();\n}\n\nexport async function findDocs(model: any, query: any = {}, options: any = {}) {\n  // المعاملات الافتراضية\n  const { sort = { createdAt: -1 }, limit = 100, skip = 0 } = options;\n  \n  // استخدام Model.find ثم lean() ثم exec() \n  return await model.find(query).sort(sort).skip(skip).limit(limit).lean().exec();\n}\n\nexport async function updateDoc(model: any, query: any, update: any, options: any = {}) {\n  return await model.updateOne(query, update, options).exec();\n}\n\nexport async function deleteDoc(model: any, query: any) {\n  return await model.deleteOne(query).exec();\n}\n\nexport async function countDocs(model: any, query: any = {}) {\n  return await model.countDocuments(query).exec();\n}\n\n/**\n * دالة مساعدة لتحويل معرفات MongoDB (_id) إلى id للاستخدام في واجهة المستخدم\n * @param docs مستندات قاعدة البيانات ليتم تحويلها\n * @returns المستندات مع إضافة حقل id\n */\nexport function addClientIds<T extends Record<string, any>>(docs: T | T[]): T | T[] {\n  if (!docs) return docs;\n  \n  // إذا كان المستند مصفوفة\n  if (Array.isArray(docs)) {\n    return docs.map(doc => addClientIds(doc)) as T[];\n  }\n  \n  // إذا كان المستند كائنًا واحدًا\n  const docCopy = { ...docs } as Record<string, any>;\n  \n  // إضافة حقل id إذا كان المستند يحتوي على _id\n  if (docCopy._id) {\n    // تحويل _id إلى سلسلة نصية إذا كان كائنًا\n    const idStr = typeof docCopy._id === 'object' && docCopy._id.toString \n      ? docCopy._id.toString() \n      : docCopy._id;\n    \n    // إضافة حقل id فقط إذا لم يكن موجودًا بالفعل\n    if (!docCopy.id) {\n      docCopy.id = idStr;\n    }\n  }\n  \n  return docCopy as T;\n}\n"],"names":[],"mappings":";;;;;;;;;AAMO,eAAe,YAAY,KAAU,EAAE,EAAU;IACtD,4DAA4D;IAC5D,OAAO,MAAM,MAAM,QAAQ,CAAC,IAAI,IAAI,GAAG,IAAI;AAC7C;AAEO,eAAe,UAAU,KAAU,EAAE,KAAU;IACpD,gDAAgD;IAChD,OAAO,MAAM,MAAM,OAAO,CAAC,OAAO,IAAI,GAAG,IAAI;AAC/C;AAEO,eAAe,SAAS,KAAU,EAAE,QAAa,CAAC,CAAC,EAAE,UAAe,CAAC,CAAC;IAC3E,uBAAuB;IACvB,MAAM,EAAE,OAAO;QAAE,WAAW,CAAC;IAAE,CAAC,EAAE,QAAQ,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG;IAE5D,0CAA0C;IAC1C,OAAO,MAAM,MAAM,IAAI,CAAC,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,KAAK,CAAC,OAAO,IAAI,GAAG,IAAI;AAC/E;AAEO,eAAe,UAAU,KAAU,EAAE,KAAU,EAAE,MAAW,EAAE,UAAe,CAAC,CAAC;IACpF,OAAO,MAAM,MAAM,SAAS,CAAC,OAAO,QAAQ,SAAS,IAAI;AAC3D;AAEO,eAAe,UAAU,KAAU,EAAE,KAAU;IACpD,OAAO,MAAM,MAAM,SAAS,CAAC,OAAO,IAAI;AAC1C;AAEO,eAAe,UAAU,KAAU,EAAE,QAAa,CAAC,CAAC;IACzD,OAAO,MAAM,MAAM,cAAc,CAAC,OAAO,IAAI;AAC/C;AAOO,SAAS,aAA4C,IAAa;IACvE,IAAI,CAAC,MAAM,OAAO;IAElB,yBAAyB;IACzB,IAAI,MAAM,OAAO,CAAC,OAAO;QACvB,OAAO,KAAK,GAAG,CAAC,CAAA,MAAO,aAAa;IACtC;IAEA,gCAAgC;IAChC,MAAM,UAAU;QAAE,GAAG,IAAI;IAAC;IAE1B,6CAA6C;IAC7C,IAAI,QAAQ,GAAG,EAAE;QACf,0CAA0C;QAC1C,MAAM,QAAQ,OAAO,QAAQ,GAAG,KAAK,YAAY,QAAQ,GAAG,CAAC,QAAQ,GACjE,QAAQ,GAAG,CAAC,QAAQ,KACpB,QAAQ,GAAG;QAEf,6CAA6C;QAC7C,IAAI,CAAC,QAAQ,EAAE,EAAE;YACf,QAAQ,EAAE,GAAG;QACf;IACF;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 640, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minaa/CascadeProjects/conquerors-website/src/app/api/blog/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { BlogCategory } from '@/types/blog';\nimport dbConnect from '@/lib/dbConnect';\nimport BlogPost from '@/models/BlogPost';\nimport mongoose from 'mongoose';\nimport { findDocById, findOnDoc, findDocs, updateDoc, deleteDoc, countDocs, addClientIds } from '@/lib/mongoHelpers';\n\n/**\n * تحويل العنوان إلى slug صديق للـ URL\n * @param text النص المراد تحويله\n * @returns slug منسق\n */\nfunction slugify(text: string): string {\n  return text\n    .toString()\n    .normalize('NFD') // تطبيع النص\n    .replace(/[\\u0300-\\u036f]/g, '') // إزالة علامات التشكيل\n    .toLowerCase() // تحويل إلى أحرف صغيرة\n    .trim() // إزالة المسافات الزائدة\n    .replace(/\\s+/g, '-') // استبدال المسافات بشرطات\n    .replace(/[^\\w\\-]+/g, '') // إزالة جميع الأحرف غير الكلمات\n    .replace(/\\-\\-+/g, '-') // استبدال الشرطات المتعددة بشرطة واحدة\n    .replace(/^-+/, '') // إزالة الشرطات من البداية\n    .replace(/-+$/, ''); // إزالة الشرطات من النهاية\n}\n\n/**\n * API للحصول على المقالات (جميع المقالات أو مقال محدد)\n */\nexport async function GET(request: NextRequest) {\n  // أقصى عدد لمحاولات الاتصال بقاعدة البيانات\n  const MAX_RETRIES = 2;\n  let retryCount = 0;\n  \n  while (retryCount <= MAX_RETRIES) {\n    try {\n      console.log(`محاولة الاتصال بقاعدة البيانات (${retryCount + 1}/${MAX_RETRIES + 1})`);\n      \n      // الاتصال بقاعدة البيانات\n      await dbConnect();\n\n      // استخراج المعلمات من الـ URL\n      const url = new URL(request.url);\n      const slug = url.searchParams.get('slug');\n      const id = url.searchParams.get('id');\n      \n      // إذا تم تقديم معرف أو slug، قم بإرجاع المقال المحدد\n      if (slug) {\n        // استخدام الوظيفة المساعدة findOnDoc لتجنب أخطاء TypeScript\n        const post = await findOnDoc(BlogPost, { \n          slug: slug, \n          isPublished: true \n        });\n        \n        if (!post) {\n          return NextResponse.json(\n            { error: 'المقال غير موجود' },\n            { status: 404 }\n          );\n        }\n        \n        // زيادة عدد المشاهدات باستخدام updateDoc\n        await updateDoc(BlogPost, \n          { slug: slug },\n          { $inc: { \"interaction.views\": 1 } }\n        );\n\n        // تحويل معرفات MongoDB إلى id للواجهة\n        const clientPost = addClientIds(post);\n        \n        // طباعة معلومات التصحيح\n        console.log(`استجابة API للمقال الفردي (${slug}): صورة: ${clientPost.featuredImage ? 'موجودة' : 'غير موجودة'}`);\n        \n        return NextResponse.json({ post: clientPost });\n      }\n      \n      if (id) {\n        // استخدام الوظيفة المساعدة findDocById لتجنب أخطاء TypeScript\n        const post = await findDocById(BlogPost, id);\n        \n        if (!post) {\n          return NextResponse.json(\n            { error: 'المقال غير موجود' },\n            { status: 404 }\n          );\n        }\n\n        // تحويل معرفات MongoDB إلى id للواجهة\n        const clientPost = addClientIds(post);\n        \n        return NextResponse.json({ post: clientPost });\n      }\n      \n      // إرجاع جميع المقالات المنشورة مع دعم التصنيف والترتيب\n      const page = parseInt(url.searchParams.get('page') || '1');\n      const limit = parseInt(url.searchParams.get('limit') || '10');\n      const sort = url.searchParams.get('sort') || 'recent';\n      const category = url.searchParams.get('category');\n      \n      // إنشاء شروط البحث\n      const query: any = {};\n      \n      // إذا لم يتم طلب عرض المنشورات غير المنشورة، نعرض فقط المنشورات المنشورة\n      const includeUnpublished = url.searchParams.get('includeUnpublished') === 'true';\n      if (!includeUnpublished) {\n        query.isPublished = true;\n      }\n      \n      if (category) {\n        query.category = category;\n      }\n      \n      // تحديد طريقة الترتيب\n      let sortOption: any = { createdAt: -1 }; // الافتراضي: الأحدث أولاً\n      \n      if (sort === 'popular') {\n        sortOption = { \"interaction.views\": -1 }; // الأكثر مشاهدة\n      } else if (sort === 'comments') {\n        sortOption = { \"comments.length\": -1 }; // الأكثر تعليقات\n      }\n      \n      // حساب التخطي للصفحات\n      const skip = (page - 1) * limit;\n      \n      console.log('Query:', JSON.stringify(query));\n      console.log('Sort:', JSON.stringify(sortOption));\n      \n      // تنفيذ الاستعلام مع الترتيب والتقسيم إلى صفحات\n      // استخدام الوظيفة المساعدة findDocs لتجنب أخطاء TypeScript\n      const posts = await findDocs(BlogPost, query, {\n        sort: sortOption,\n        skip: skip,\n        limit: limit\n      });\n      \n      console.log(`تم استرجاع ${posts.length} منشورات`);\n      \n      // الحصول على إجمالي عدد المقالات للترقيم\n      const total = await countDocs(BlogPost, query);\n      const totalPages = Math.ceil(total / limit);\n      \n      // تحويل معرفات المنشورات من MongoDB إلى id للواجهة\n      const clientPosts = addClientIds(posts);\n      \n      // الطباعة للتصحيح\n      console.log('تحويل منشورات MongoDB إلى منشورات لواجهة المستخدم مع الصور:');\n      clientPosts.forEach(post => {\n        console.log(`المنشور: ${post.title} - صورة: ${post.featuredImage ? 'موجودة' : 'غير موجودة'}`);\n      });\n      \n      // إرجاع النتائج مع معلومات الترقيم\n      const pagination = {\n        total,\n        page,\n        limit,\n        totalPages,\n      };\n      \n      return NextResponse.json({ \n        posts: clientPosts, \n        pagination \n      });\n      \n    } catch (error) {\n      retryCount++;\n      \n      if (retryCount > MAX_RETRIES) {\n        console.error('Error fetching posts after maximum retries:', error);\n        \n        // تفاصيل إضافية للخطأ\n        let errorMessage = 'حدث خطأ أثناء جلب المقالات';\n        let errorDetails = '';\n        \n        if (error instanceof Error) {\n          errorDetails = error.message;\n          \n          // تحسين رسائل الخطأ\n          if (error.message.includes('MongoServerSelectionError')) {\n            errorMessage = 'تعذر الاتصال بخادم قاعدة البيانات';\n          } else if (error.message.includes('Authentication failed')) {\n            errorMessage = 'فشل المصادقة مع قاعدة البيانات';\n          } else if (error.message.includes('Operation')) {\n            errorMessage = 'انتهت مهلة عملية قاعدة البيانات';\n          }\n        }\n        \n        return NextResponse.json(\n          { \n            error: errorMessage, \n            details: errorDetails,\n            code: 'DB_ERROR' \n          },\n          { status: 500 }\n        );\n      }\n      \n      // انتظار قبل المحاولة مرة أخرى - تزداد المدة مع كل محاولة\n      const delay = 1000 * retryCount; // 1 ثانية، ثم 2 ثانية\n      console.log(`فشل الاتصال بقاعدة البيانات، إعادة المحاولة بعد ${delay}ms...`);\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n  \n  // لن يتم الوصول إلى هذه النقطة أبدًا بسبب حلقة المحاولة أعلاه\n  return NextResponse.json(\n    { error: 'خطأ غير متوقع' },\n    { status: 500 }\n  );\n}\n\n/**\n * API لإنشاء مقال جديد\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // الاتصال بقاعدة البيانات\n    await dbConnect();\n\n    // التحقق من نوع المحتوى\n    const contentType = request.headers.get('content-type') || '';\n    \n    let title = '';\n    let content = '';\n    let summary = '';\n    let category = '';\n    let tags: string[] = [];\n    let featuredImage: string | null = null;\n    let author: any = null;\n    \n    // التعامل مع FormData (في حالة تحميل ملفات)\n    if (contentType.includes('multipart/form-data')) {\n      const formData = await request.formData();\n      \n      title = formData.get('title') as string || '';\n      content = formData.get('content') as string || '';\n      category = formData.get('category') as string || 'news';\n      const authorName = formData.get('authorName') as string || 'مستخدم جديد';\n      const authorAvatar = formData.get('authorAvatar') as string || '/images/avatars/default.png';\n      \n      // معالجة الصورة المرفقة\n      const imageFile = formData.get('image') as File;\n      if (imageFile && imageFile.size > 0) {\n        console.log('تم استلام ملف صورة:', imageFile.name, 'حجم:', imageFile.size);\n        \n        try {\n          // تحويل الصورة إلى Data URL للعرض مباشرة\n          const arrayBuffer = await imageFile.arrayBuffer();\n          const buffer = Buffer.from(arrayBuffer);\n          const base64 = buffer.toString('base64');\n          const contentType = imageFile.type || 'image/jpeg';\n          featuredImage = `data:${contentType};base64,${base64}`;\n          console.log('تم معالجة الصورة بنجاح وتحويلها إلى صيغة قابلة للعرض');\n        } catch (error) {\n          console.error('خطأ في معالجة ملف الصورة:', error);\n        }\n      } else {\n        console.log('لم يتم العثور على ملف الصورة في FormData أو أن الملف فارغ');\n      }\n      \n      // إنشاء ملخص من المحتوى إذا لم يكن موجودًا\n      summary = content.substring(0, 150) + (content.length > 150 ? '...' : '');\n      \n      // معلومات المؤلف\n      author = {\n        name: authorName,\n        avatar: authorAvatar,\n        isVerified: false\n      };\n    } \n    // التعامل مع JSON\n    else {\n      const body = await request.json();\n      title = body.title || '';\n      content = body.content || '';\n      summary = body.summary || '';\n      category = body.category || '';\n      tags = body.tags || [];\n      featuredImage = body.featuredImage || null;\n      author = body.author || null;\n    }\n\n    // التحقق من وجود محتوى\n    if (!content) {\n      return NextResponse.json(\n        { error: 'محتوى المنشور مطلوب' },\n        { status: 400 }\n      );\n    }\n    \n    // التأكد من وجود عنوان مناسب\n    if (!title || title.trim() === '') {\n      title = content.substring(0, 50) + (content.length > 50 ? '...' : '');\n    }\n    \n    // التأكد من وجود ملخص\n    if (!summary || summary.trim() === '') {\n      summary = content.substring(0, 150) + (content.length > 150 ? '...' : '');\n    }\n    \n    // التأكد من وجود فئة\n    if (!category) {\n      category = 'news';\n    }\n\n    // إنشاء slug فريد من العنوان\n    let slug = slugify(title);\n    if (!slug) {\n      slug = 'post-' + Date.now().toString();\n    }\n    \n    // التحقق مما إذا كان الـ slug موجودًا بالفعل\n    const existingPost = await findOnDoc(BlogPost, { \n      slug: slug \n    });\n    \n    if (existingPost) {\n      // إضافة رقم عشوائي لتجنب تكرار الـ slug\n      slug = `${slug}-${Date.now().toString().slice(-6)}`;\n    }\n    \n    // إنشاء مقال جديد\n    const newPost = new mongoose.models.BlogPost({\n      title,\n      slug,\n      content,\n      summary,\n      category,\n      tags: tags || [],\n      featuredImage: featuredImage || null,\n      author: {\n        name: author?.name || 'فريق الفاتحون',\n        avatar: author?.avatar || '/images/avatars/team.png',\n        isVerified: author?.isVerified || false\n      },\n      interaction: {\n        likes: [],\n        shares: 0,\n        views: 0,\n        bookmarks: []\n      },\n      isPublished: true, // تغيير ليكون منشورًا بشكل افتراضي\n      isApproved: true // تغيير ليكون موافقًا عليه بشكل افتراضي\n    });\n    \n    // حفظ المقال في قاعدة البيانات\n    await newPost.save();\n    \n    return NextResponse.json({\n      success: true,\n      post: newPost\n    });\n  } catch (error) {\n    console.error('Error creating post:', error);\n    return NextResponse.json(\n      { error: 'حدث خطأ أثناء إنشاء المقال' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * API لتحديث مقال موجود\n */\nexport async function PUT(request: NextRequest) {\n  try {\n    // الاتصال بقاعدة البيانات\n    await dbConnect();\n    \n    const body = await request.json();\n    console.log('Request body:', JSON.stringify(body, null, 2));\n    \n    const { id, title, content, summary, category, tags, isPublished, isApproved, featuredImage } = body;\n    \n    if (!id) {\n      console.error('خطأ: معرف المقال غير موجود في الطلب');\n      return NextResponse.json(\n        { error: 'معرف المقال مطلوب' },\n        { status: 400 }\n      );\n    }\n    \n    // تحديث المقال مباشرة في قاعدة البيانات\n    const updateData: any = {\n      updatedAt: new Date()\n    };\n    \n    if (title) {\n      updateData.title = title;\n      \n      // تحديث الـ slug إذا تغير العنوان\n      let newSlug = slugify(title);\n      if (!newSlug) {\n        newSlug = 'post-' + Date.now().toString();\n      }\n      \n      const existingPost = await findOnDoc(BlogPost, { \n        slug: newSlug, \n        _id: { $ne: id } \n      });\n      \n      if (existingPost) {\n        // إضافة تاريخ للـ slug لتجنب التكرار\n        newSlug = `${newSlug}-${Date.now().toString().slice(-6)}`;\n      }\n      \n      updateData.slug = newSlug;\n    }\n    \n    if (content) updateData.content = content;\n    if (summary) updateData.summary = summary;\n    if (category) updateData.category = category;\n    if (tags) updateData.tags = tags;\n    \n    if (isPublished !== undefined) {\n      updateData.isPublished = isPublished;\n    }\n    \n    if (isApproved !== undefined) {\n      updateData.isApproved = isApproved;\n    }\n    \n    // إضافة معالجة لحقل الصورة المميزة\n    if (featuredImage !== undefined) {\n      updateData.featuredImage = featuredImage;\n      console.log('تحديث الصورة المميزة:', featuredImage);\n    }\n    \n    try {\n      // استخدام updateDoc مع التحقق من النوع\n      if (!mongoose.Types.ObjectId.isValid(id)) {\n        return NextResponse.json(\n          { error: 'معرف المقال غير صالح' },\n          { status: 400 }\n        );\n      }\n\n      // تحديث المقال مع التحقق من النجاح\n      const updateResult = await updateDoc(BlogPost, { _id: id }, updateData);\n      \n      if (!updateResult) {\n        throw new Error('فشل في تحديث المقال');\n      }\n      \n      // جلب المقال المحدث مع التحقق من وجوده\n      const post = await findDocById(BlogPost, id);\n      \n      if (!post) {\n        return NextResponse.json(\n          { error: 'حدث خطأ أثناء جلب المقال المحدث' },\n          { status: 500 }\n        );\n      }\n      \n      // نظرًا لأن findDocById يستخدم lean()، فالنتيجة هي كائن JavaScript عادي وليس وثيقة Mongoose\n      return NextResponse.json({\n        success: true,\n        post: {\n          ...post, // استخدام الكائن مباشرة بدلاً من استدعاء toObject()\n          _id: post._id.toString(),\n          createdAt: post.createdAt ? new Date(post.createdAt).toISOString() : undefined,\n          updatedAt: post.updatedAt ? new Date(post.updatedAt).toISOString() : undefined\n        }\n      });\n    } catch (error) {\n      console.error('Error updating post:', error);\n      return NextResponse.json(\n        { error: 'حدث خطأ أثناء تحديث المقال' },\n        { status: 500 }\n      );\n    }\n  } catch (error) {\n    console.error('Error updating post:', error);\n    return NextResponse.json(\n      { error: 'حدث خطأ أثناء تحديث المقال' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * API لحذف مقال\n */\nexport async function DELETE(request: NextRequest) {\n  try {\n    // الاتصال بقاعدة البيانات\n    await dbConnect();\n    \n    const url = new URL(request.url);\n    const id = url.searchParams.get('id');\n    \n    if (!id) {\n      return NextResponse.json(\n        { error: 'معرف المقال مطلوب' },\n        { status: 400 }\n      );\n    }\n    \n    // التحقق من وجود المقال قبل الحذف\n    const exists = await findDocById(BlogPost, id);\n    \n    if (!exists) {\n      return NextResponse.json(\n        { error: 'المقال غير موجود' },\n        { status: 404 }\n      );\n    }\n    \n    // حذف المقال\n    await deleteDoc(BlogPost, { _id: id });\n    \n    return NextResponse.json({ \n      success: true,\n      message: 'تم حذف المقال بنجاح'\n    });\n  } catch (error) {\n    console.error('Error deleting post:', error);\n    return NextResponse.json(\n      { error: 'حدث خطأ أثناء حذف المقال' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}