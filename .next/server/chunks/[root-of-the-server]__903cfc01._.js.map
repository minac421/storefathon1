{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minaa/CascadeProjects/conquerors-website/src/app/api/user/settings/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\n// بيانات مؤقتة للمستخدمين (في نظام حقيقي، يتم استخدام قاعدة بيانات)\nlet userSettings: Record<string, {nickname: string; avatarId: number}> = {};\n\nexport async function GET(req: NextRequest) {\n  try {\n    // استخدام معرف المستخدم من الـ cookies (في تطبيق حقيقي، ستستخدم نظام المصادقة)\n    const userId = req.cookies.get('userId')?.value || 'anonymous';\n    \n    // استرجاع إعدادات المستخدم\n    const settings = userSettings[userId] || null;\n    \n    return NextResponse.json({ \n      success: true, \n      settings \n    });\n  } catch (error) {\n    console.error('Error fetching user settings:', error);\n    return NextResponse.json({ \n      success: false, \n      error: 'فشل في جلب إعدادات المستخدم' \n    }, { status: 500 });\n  }\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const userId = req.cookies.get('userId')?.value || 'anonymous';\n    const { nickname, avatarId } = await req.json();\n    \n    // التحقق من بيانات المستخدم\n    if (!nickname || typeof nickname !== 'string') {\n      return NextResponse.json({ \n        success: false, \n        error: 'يجب تحديد اسم مستعار صالح' \n      }, { status: 400 });\n    }\n    \n    if (!avatarId || typeof avatarId !== 'number') {\n      return NextResponse.json({ \n        success: false, \n        error: 'يجب اختيار صورة شخصية صالحة' \n      }, { status: 400 });\n    }\n    \n    // حفظ بيانات المستخدم\n    userSettings[userId] = { nickname, avatarId };\n    \n    // يمكن إضافة مزيد من المنطق هنا مثل حفظ البيانات في قاعدة بيانات\n    \n    return NextResponse.json({ \n      success: true, \n      settings: { nickname, avatarId } \n    });\n  } catch (error) {\n    console.error('Error saving user settings:', error);\n    return NextResponse.json({ \n      success: false, \n      error: 'فشل في حفظ إعدادات المستخدم' \n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEA,oEAAoE;AACpE,IAAI,eAAqE,CAAC;AAEnE,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,+EAA+E;QAC/E,MAAM,SAAS,IAAI,OAAO,CAAC,GAAG,CAAC,WAAW,SAAS;QAEnD,2BAA2B;QAC3B,MAAM,WAAW,YAAY,CAAC,OAAO,IAAI;QAEzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;QACT,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,SAAS,IAAI,OAAO,CAAC,GAAG,CAAC,WAAW,SAAS;QACnD,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE7C,4BAA4B;QAC5B,IAAI,CAAC,YAAY,OAAO,aAAa,UAAU;YAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,IAAI,CAAC,YAAY,OAAO,aAAa,UAAU;YAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,sBAAsB;QACtB,YAAY,CAAC,OAAO,GAAG;YAAE;YAAU;QAAS;QAE5C,iEAAiE;QAEjE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,UAAU;gBAAE;gBAAU;YAAS;QACjC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;QACT,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}