{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minaa/CascadeProjects/conquerors-website/src/lib/dbConnect.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\n// الرابط الخاص بقاعدة البيانات MongoDB Atlas - استخدم المتغير البيئي أولاً\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://minaadelc4:cHjkStQnKuh91sNt@storefathone.a42qbk5.mongodb.net/storefathon?retryWrites=true&w=majority&appName=storefathone';\n\n/**\n * تعريف حالات الاتصال لقاعدة البيانات\n */\n// يجب استخدام نفس القيم العددية التي يستخدمها Mongoose\nconst MONGOOSE_STATES = {\n  disconnected: 0,\n  connected: 1,\n  connecting: 2,\n  disconnecting: 3,\n} as const;\n\n// ترجمة حالات الاتصال إلى العربية\nconst CONNECTION_STATE_NAMES = [\n  'منفصل',        // 0\n  'متصل',         // 1\n  'جاري الاتصال', // 2\n  'جاري الانفصال' // 3\n];\n\n/**\n * الاتصال العمومي بقاعدة البيانات\n * سيتم استخدامه في جميع أنحاء التطبيق\n * \n * ملاحظة هامة: يجب التأكد من أن الإعدادات الأمنية في MongoDB Atlas تسمح باتصال من IP الخادم\n * تأكد من إضافة IP الخادم في Network Access في MongoDB Atlas\n * وإذا كنت تستخدم Vercel، فتأكد من إضافة 0.0.0.0/0 للسماح بالوصول من جميع عناوين IP\n */\nif (!MONGODB_URI) {\n  throw new Error('يرجى تحديد رابط MONGODB_URI في ملف .env.local');\n}\n\n/**\n * متغير عمومي للحالة في النطاق العمومي\n * لمنع إعادة الاتصال في كل مرة يتم فيها استخدام الدالة\n */\ninterface Cached {\n  conn: mongoose.Connection | null;\n  promise: Promise<mongoose.Connection> | null;\n  errorCount: number;\n  lastErrorTime: number | null;\n}\n\ndeclare global {\n  // eslint-disable-next-line\n  var mongoose: { \n    conn: mongoose.Connection | null; \n    promise: Promise<mongoose.Connection> | null;\n    errorCount: number;\n    lastErrorTime: number | null;\n  };\n}\n\n// تهيئة الكاش العمومي\nlet cached: Cached = global.mongoose as Cached;\n\nif (!cached) {\n  cached = global.mongoose = { \n    conn: null, \n    promise: null, \n    errorCount: 0,\n    lastErrorTime: null \n  };\n}\n\n/**\n * دالة الاتصال بقاعدة البيانات\n * تعيد اتصال قاعدة البيانات أو ترمي خطأ إذا فشل الاتصال بعد عدة محاولات\n */\nasync function dbConnect(): Promise<mongoose.Connection> {\n  // التحقق إذا كان الاتصال موجودًا بالفعل\n  if (cached.conn) {\n    // اختبار الاتصال القائم\n    try {\n      const currentState = cached.conn.readyState;\n      \n      if (currentState === MONGOOSE_STATES.connected) {\n        return cached.conn;\n      } else {\n        console.log(`⚠️ حالة الاتصال بقاعدة البيانات غير صالحة (readyState=${currentState})، إعادة الاتصال...`);\n        cached.conn = null;\n        cached.promise = null;\n      }\n    } catch (connError) {\n      console.error('❌ خطأ عند فحص حالة الاتصال الحالي:', connError);\n      cached.conn = null;\n      cached.promise = null;\n    }\n  }\n\n  // التحقق من وقت حدوث آخر خطأ - إعادة ضبط عداد الأخطاء إذا مر وقت كافٍ\n  if (cached.lastErrorTime && Date.now() - cached.lastErrorTime > 60000) {\n    console.log('🔄 إعادة ضبط عداد الأخطاء بعد مرور دقيقة');\n    cached.errorCount = 0;\n    cached.lastErrorTime = null;\n  }\n\n  // التحقق من عدد المحاولات المتكررة\n  if (cached.errorCount > 5) {\n    const timeSinceLastError = cached.lastErrorTime ? Math.floor((Date.now() - cached.lastErrorTime) / 1000) : 0;\n    console.error(`⛔ تجاوز الحد الأقصى لمحاولات الاتصال (${cached.errorCount}). آخر محاولة منذ ${timeSinceLastError} ثانية.`);\n    \n    // إعادة تعيين العداد بعد 1 دقيقة\n    if (timeSinceLastError > 60) {\n      console.log('🔄 إعادة ضبط عداد محاولات الاتصال بعد فترة انتظار');\n      cached.errorCount = 0;\n    } else {\n      throw new Error(`تجاوز الحد الأقصى لمحاولات الاتصال بقاعدة البيانات. حاول مرة أخرى لاحقًا (${Math.max(0, 60 - timeSinceLastError)} ثانية متبقية)`);\n    }\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: true,\n      serverSelectionTimeoutMS: 20000, // زيادة مهلة اتصال السيرفر إلى 20 ثانية\n      connectTimeoutMS: 20000, // زيادة مهلة الاتصال إلى 20 ثانية\n      socketTimeoutMS: 60000, // زيادة مهلة انتهاء مدة البحث عن السيرفر إلى 60 ثانية\n      family: 4, // استخدام IPv4 بدلاً من IPv6\n      maxPoolSize: 10, // تحديد الحد الأقصى لعدد الاتصالات في المجمع\n      retryWrites: true, // إعادة محاولة الكتابة تلقائيًا\n      retryReads: true, // إعادة محاولة القراءة تلقائيًا\n    };\n\n    // طباعة الرابط للتحقق منه (مع إخفاء كلمة المرور للأمان)\n    const sanitizedUri = MONGODB_URI.replace(/(mongodb\\+srv:\\/\\/[^:]+):[^@]+@/, '$1:****@');\n    console.log('🔍 محاولة الاتصال بـ:', sanitizedUri);\n    \n    // معالجة الاتصال بشكل أفضل\n    cached.promise = mongoose.connect(MONGODB_URI, opts)\n      .then((mongoose) => {\n        const connection = mongoose.connection;\n        console.log(`🌿 تم الاتصال بقاعدة البيانات MongoDB بنجاح! (${connection.name})`);\n        \n        // إضافة مستمع لأحداث الخطأ\n        connection.on('error', (err) => {\n          console.error('❌ خطأ في اتصال قاعدة البيانات خلال التشغيل:', err);\n        });\n        \n        connection.on('disconnected', () => {\n          console.warn('⚠️ انقطع الاتصال بقاعدة البيانات');\n          cached.conn = null;\n        });\n        \n        // إعادة تعيين عداد الأخطاء عند نجاح الاتصال\n        cached.errorCount = 0;\n        cached.lastErrorTime = null;\n        return connection;\n      })\n      .catch((error) => {\n        // زيادة عداد الأخطاء وتسجيل وقت آخر خطأ\n        cached.errorCount++;\n        cached.lastErrorTime = Date.now();\n        \n        console.error('❌ خطأ في الاتصال بقاعدة البيانات MongoDB:', error.message);\n        \n        // تحقق من نوع الخطأ وتقديم رسائل مفيدة\n        if (error.name === 'MongoServerSelectionError') {\n          console.error('⚠️ خطأ اختيار السيرفر: تأكد من أن عنوان IP الخاص بك مسموح به في إعدادات الأمان لـ MongoDB Atlas');\n          console.error('💡 اقتراح: اضبط Network Access في MongoDB Atlas للسماح لـ 0.0.0.0/0 للاختبار');\n        }\n        if (error.message.includes('Authentication failed')) {\n          console.error('🔑 فشل المصادقة: تأكد من صحة اسم المستخدم وكلمة المرور');\n        }\n        if (error.message.includes('getaddrinfo')) {\n          console.error('🌐 خطأ DNS: تأكد من اسم النطاق الصحيح وتوفر اتصال الإنترنت');\n        }\n        \n        // إعادة تعيين الوعد للسماح بالمحاولة التالية\n        cached.promise = null;\n        throw error;\n      });\n  } else {\n    console.log('♻️ استخدام وعد اتصال موجود');\n  }\n\n  try {\n    cached.conn = await cached.promise;\n  } catch (e) {\n    // إعادة ضبط الوعد في حالة حدوث خطأ\n    cached.promise = null;\n    throw e;\n  }\n\n  // التحقق من حالة الاتصال\n  const connectionState = cached.conn.readyState;\n  \n  if (connectionState !== MONGOOSE_STATES.connected) {\n    console.warn(`⚠️ حالة الاتصال غير متوقعة: ${connectionState}`);\n    \n    // عرض اسم حالة الاتصال\n    const stateName = CONNECTION_STATE_NAMES[connectionState] || 'غير معروفة';\n    console.warn(`📊 حالة الاتصال: ${stateName}`);\n    \n    // إذا كانت الحالة \"جاري الاتصال\"، انتظر قليلاً\n    if (connectionState === MONGOOSE_STATES.connecting) {\n      console.log('⏳ جاري الاتصال، الانتظار...');\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // التحقق مرة أخرى بعد الانتظار\n      const newState = cached.conn.readyState;\n      if (newState === MONGOOSE_STATES.connected) {\n        console.log('✅ تم الاتصال بنجاح بعد الانتظار');\n      } else {\n        const newStateName = CONNECTION_STATE_NAMES[newState] || 'غير معروفة';\n        console.warn(`⚠️ لا يزال الاتصال في حالة غير متوقعة: ${newState} (${newStateName})`);\n      }\n    }\n  }\n\n  return cached.conn;\n}\n\nexport default dbConnect;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minaa/CascadeProjects/conquerors-website/src/models/ChatMessage.ts"],"sourcesContent":["import mongoose, { Schema, Document } from 'mongoose';\r\n\r\n// تعريف واجهة الرسالة\r\nexport interface IChatMessage extends Document {\r\n  sender: string;\r\n  senderAvatarId: number;\r\n  message: string;\r\n  timestamp: string;\r\n  interaction: {\r\n    likes: string[];\r\n    isLiked: boolean;\r\n  };\r\n}\r\n\r\n// تعريف سكيما الرسالة\r\nconst ChatMessageSchema: Schema = new Schema({\r\n  sender: {\r\n    type: String,\r\n    required: true,\r\n    trim: true\r\n  },\r\n  senderAvatarId: {\r\n    type: Number,\r\n    required: true,\r\n    default: 1\r\n  },\r\n  message: {\r\n    type: String,\r\n    required: true,\r\n    trim: true\r\n  },\r\n  timestamp: {\r\n    type: String,\r\n    required: true,\r\n    default: () => new Date().toISOString()\r\n  },\r\n  interaction: {\r\n    likes: {\r\n      type: [String],\r\n      default: []\r\n    },\r\n    isLiked: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  }\r\n}, {\r\n  timestamps: true,\r\n  versionKey: false\r\n});\r\n\r\n// تعريف النموذج\r\nlet ChatMessageModel: mongoose.Model<IChatMessage>;\r\n\r\ntry {\r\n  // محاولة الحصول على النموذج إذا كان موجوداً بالفعل\r\n  ChatMessageModel = mongoose.model<IChatMessage>('ChatMessage');\r\n} catch {\r\n  // إنشاء النموذج إذا لم يكن موجوداً\r\n  ChatMessageModel = mongoose.model<IChatMessage>('ChatMessage', ChatMessageSchema);\r\n}\r\n\r\nexport default ChatMessageModel; "],"names":[],"mappings":";;;AAAA;;AAcA,sBAAsB;AACtB,MAAM,oBAA4B,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC3C,QAAQ;QACN,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,gBAAgB;QACd,MAAM;QACN,UAAU;QACV,SAAS;IACX;IACA,SAAS;QACP,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,SAAS,IAAM,IAAI,OAAO,WAAW;IACvC;IACA,aAAa;QACX,OAAO;YACL,MAAM;gBAAC;aAAO;YACd,SAAS,EAAE;QACb;QACA,SAAS;YACP,MAAM;YACN,SAAS;QACX;IACF;AACF,GAAG;IACD,YAAY;IACZ,YAAY;AACd;AAEA,gBAAgB;AAChB,IAAI;AAEJ,IAAI;IACF,mDAAmD;IACnD,mBAAmB,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAe;AAClD,EAAE,OAAM;IACN,mCAAmC;IACnC,mBAAmB,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAe,eAAe;AACjE;uCAEe","debugId":null}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minaa/CascadeProjects/conquerors-website/src/app/api/socket/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport dbConnect from '@/lib/dbConnect';\r\nimport ChatMessageModel from '@/models/ChatMessage';\r\n\r\n// توفير واجهة برمجة تطبيقات للدردشة\r\n// يتم استخدامه مع Socket.IO أو كنقطة نهاية مباشرة للدردشة\r\n\r\nexport async function GET(request) {\r\n  try {\r\n    // الاتصال بقاعدة البيانات\r\n    await dbConnect();\r\n    \r\n    // قراءة آخر الرسائل - افتراضياً 20 رسالة\r\n    const messages = await ChatMessageModel.find({})\r\n      .sort({ timestamp: -1 })\r\n      .limit(20)\r\n      .lean();\r\n    \r\n    // ترتيب الرسائل من الأقدم إلى الأحدث للعرض\r\n    const sortedMessages = [...messages].sort((a, b) => \r\n      new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n    );\r\n    \r\n    // إنشاء قائمة المستخدمين المتصلين من الرسائل الفعلية فقط\r\n    const users = Array.from(new Set(sortedMessages.map(msg => msg.sender)))\r\n      .filter(username => username) // تأكد من أن اسم المستخدم موجود\r\n      .map(username => {\r\n        const matchingMsg = sortedMessages.find(msg => msg.sender === username);\r\n        return {\r\n          name: username,\r\n          avatarId: matchingMsg?.senderAvatarId || 1,\r\n          status: 'online'\r\n        };\r\n      });\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      messages: sortedMessages,\r\n      users,\r\n      mode: 'api',\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching chat messages:', error);\r\n    return NextResponse.json({ \r\n      success: false, \r\n      error: 'فشل في جلب بيانات الدردشة',\r\n      mode: 'error',\r\n      message: error.message\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    // الاتصال بقاعدة البيانات\r\n    await dbConnect();\r\n    \r\n    const body = await request.json();\r\n    \r\n    // التحقق من وجود البيانات المطلوبة\r\n    if (!body.message || !body.sender) {\r\n      return NextResponse.json({ \r\n        success: false, \r\n        error: 'بيانات غير مكتملة',\r\n        mode: 'error'\r\n      }, { status: 400 });\r\n    }\r\n    \r\n    // إضافة رسالة جديدة إلى قاعدة البيانات\r\n    const newMessage = {\r\n      sender: body.sender,\r\n      senderAvatarId: body.senderAvatarId || 1,\r\n      message: body.message,\r\n      timestamp: new Date().toISOString(),\r\n      interaction: {\r\n        likes: [],\r\n        isLiked: false\r\n      }\r\n    };\r\n    \r\n    const savedMessage = await ChatMessageModel.create(newMessage);\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      message: savedMessage,\r\n      mode: 'api'\r\n    });\r\n  } catch (error) {\r\n    console.error('Error adding message:', error);\r\n    return NextResponse.json({ \r\n      success: false, \r\n      error: 'فشل في إضافة الرسالة',\r\n      mode: 'error',\r\n      message: error.message\r\n    }, { status: 500 });\r\n  }\r\n} "],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAKO,eAAe,IAAI,OAAO;IAC/B,IAAI;QACF,0BAA0B;QAC1B,MAAM,CAAA,GAAA,yHAAA,CAAA,UAAS,AAAD;QAEd,yCAAyC;QACzC,MAAM,WAAW,MAAM,8HAAA,CAAA,UAAgB,CAAC,IAAI,CAAC,CAAC,GAC3C,IAAI,CAAC;YAAE,WAAW,CAAC;QAAE,GACrB,KAAK,CAAC,IACN,IAAI;QAEP,2CAA2C;QAC3C,MAAM,iBAAiB;eAAI;SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,IAC5C,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;QAGjE,yDAAyD;QACzD,MAAM,QAAQ,MAAM,IAAI,CAAC,IAAI,IAAI,eAAe,GAAG,CAAC,CAAA,MAAO,IAAI,MAAM,IAClE,MAAM,CAAC,CAAA,WAAY,UAAU,gCAAgC;SAC7D,GAAG,CAAC,CAAA;YACH,MAAM,cAAc,eAAe,IAAI,CAAC,CAAA,MAAO,IAAI,MAAM,KAAK;YAC9D,OAAO;gBACL,MAAM;gBACN,UAAU,aAAa,kBAAkB;gBACzC,QAAQ;YACV;QACF;QAEF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,UAAU;YACV;YACA,MAAM;YACN,WAAW,IAAI,OAAO,WAAW;QACnC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;YACP,MAAM;YACN,SAAS,MAAM,OAAO;QACxB,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,0BAA0B;QAC1B,MAAM,CAAA,GAAA,yHAAA,CAAA,UAAS,AAAD;QAEd,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,mCAAmC;QACnC,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,MAAM,EAAE;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;gBACP,MAAM;YACR,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,uCAAuC;QACvC,MAAM,aAAa;YACjB,QAAQ,KAAK,MAAM;YACnB,gBAAgB,KAAK,cAAc,IAAI;YACvC,SAAS,KAAK,OAAO;YACrB,WAAW,IAAI,OAAO,WAAW;YACjC,aAAa;gBACX,OAAO,EAAE;gBACT,SAAS;YACX;QACF;QAEA,MAAM,eAAe,MAAM,8HAAA,CAAA,UAAgB,CAAC,MAAM,CAAC;QAEnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;YACP,MAAM;YACN,SAAS,MAAM,OAAO;QACxB,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}